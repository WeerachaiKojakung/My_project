import 'dart:convert';
import 'dart:developer';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:my_app/species/speciesAll.dart'; // Import the speciesAll.dart file
import 'package:my_app/diseases/diseasesAll.dart'; // Import the diseasesAll.dart file

String SERVER = 'http://10.0.2.2'; //emulator
// var SERVER = "http://192.168.123.101";

void main() {
  SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(statusBarColor: Colors.transparent));
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Smart TreeBox App',
      theme: ThemeData(primarySwatch: Colors.green),
      home: const HomeScreen(),
      
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('สายพันธุ์ของมะเขือเทศพุ่มเตี้ย',
            style: TextStyle(color: Colors.black)),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          setState(() {});
        },
        child: SingleChildScrollView(
          child: SizedBox(
            height: MediaQuery.of(context).size.height,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    flex: 3,
                    child: GridView.count(
                      crossAxisCount: 2,
                      mainAxisSpacing: 10,
                      childAspectRatio: 2 / 3,
                      children: [
                        InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => SpeciesScreen()),
                            );
                          },
                          child: myhome(
                              'สายพันธุ์ของมะเขือเทศ', 'assets/images/t_1.jpg'),
                        ),
                        InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => DiseasesScreen()),
                            );
                          },
                          child: myhome(
                              'โรคของมะเขือเทศ', 'assets/images/t_2.jpg'),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 20.0),
                  Text(
                    'ค่าล่าสุด',
                    style: TextStyle(
                      fontSize: 22.0,
                    ),
                  ),
                  FutureBuilder(
                    future: Dio().get('$SERVER/tomato/getDisease.php'),
                    builder: (context, snapshot) {
                      if (snapshot.hasData) {
                        final res =
                            snapshot.data; //คืนค่ามาต้องเป็น JSON เท่านั้น
                        if (res!.data.toString().isEmpty) {
                          return Text('Val Err!!');
                        } else {
                          final json = jsonDecode(res.data);
                          log('json:$json');
                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('disease_id = ${json[0]['disease_id']}'),
                              Text('disease_dt = ${json[0]['disease_dt']}'),
                              Text('disease_pic = ${json[0]['disease_pic']}'),
                              Text('disease_ret1 = ${json[0]['disease_ret1']}'),
                              Text('disease_ret2 = ${json[0]['disease_ret2']}'),
                              Text('disease_ret3 = ${json[0]['disease_ret3']}'),
                              json[0]['disease_pic'].toString().isNotEmpty
                                  ? Center(
                                      child: Image.network(
                                        '$SERVER/tomato/images/${json[0]['disease_pic']}',
                                        width:
                                            MediaQuery.of(context).size.width *
                                                0.9,
                                      ),
                                    )
                                  : SizedBox(),
                            ],
                          );
                        }
                      } else if (snapshot.hasError) {
                        return Text('Error!! ${snapshot.error}');
                      } else {
                        return Center(child: CircularProgressIndicator());
                      }
                    },
                  ),
                  SizedBox(height: 20.0),
                  FutureBuilder(
                    future: Dio().get('$SERVER/tomato/getLogging.php'),
                    builder: (context, snapshot) {
                      if (snapshot.hasData) {
                        final res =
                            snapshot.data; //คืนค่ามาต้องเป็น JSON เท่านั้น
                        if (res!.data.toString().isEmpty) {
                          return Text('Val Err!!');
                        } else {
                          final json = jsonDecode(res.data);
                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('val1 = ${json[0]['log_val1']}'),
                              Text('val2 = ${json[0]['log_val2']}'),
                              Text('val3 = ${json[0]['log_val3']}'),
                              Text('val4 = ${json[0]['log_val4']}'),
                              Text('val5 = ${json[0]['log_val5']}'),
                              Text('val6 = ${json[0]['log_val6']}'),
                              Text('val7 = ${json[0]['log_val7']}'),
                              Text('val8 = ${json[0]['log_val8']}'),
                              Text('val9 = ${json[0]['log_val9']}'),
                            ],
                          );
                        }
                      } else if (snapshot.hasError) {
                        return Text('Error!! ${snapshot.error}');
                      } else {
                        return Center(child: CircularProgressIndicator());
                      }
                    },
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  myhome(String title, String img) => Container(
        margin: const EdgeInsets.all(5),
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(10),
            boxShadow: [
              BoxShadow(
                  offset: const Offset(0, 5),
                  color: Theme.of(context).primaryColor.withOpacity(.2),
                  spreadRadius: 2,
                  blurRadius: 5)
            ]),
        child: Column(
          children: [
            Expanded(
              child: ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(img, fit: BoxFit.cover),
              ),
            ),
            const SizedBox(height: 10),
            Text(title, style: Theme.of(context).textTheme.titleMedium)
          ],
        ),
      );
}
