import 'package:sqflite/sqflite.dart' as sql;

class SQLHelper {
  static Future<void> createTables(sql.Database database) async {
    await database.execute("""CREATE TABLE data (
      id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      title TEXT,
      desc TEXT,
      createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP)""");
  }

  static Future<sql.Database> db() async {
    return sql.openDatabase("database_name.db", version: 1,
        onCreate: (sql.Database database, int version) async {
      await createTables(database);
    });
  }

  static Future<int> createData(String title, String? desc) async {
    final db = await SQLHelper.db();

    final data = {'title': title, 'desc': desc};
    final id = await db.insert('data', data,
        conflictAlgorithm: sql.ConflictAlgorithm.replace);

    return id;
  }

  static Future<List<Map<String, dynamic>>> getAllData() async {
    final db = await SQLHelper.db();
    return db.query('data', orderBy: 'id');
  }

  static Future<List<Map<String, dynamic>>> getSingleData(int id) async {
    final db = await SQLHelper.db();
    return db.query('data', where: "id = ?", whereArgs: [id], limit: 1);
  }

  static Future<int> updateData(int id, String title, String? desc) async {
    final db = await SQLHelper.db();
    final data = {
      'title': title,
      'desc': desc,
      'createdAt': DateTime.now().toString()
    };
    final result =
        await db.update('data', data, where: "id = ?", whereArgs: [id]);
    return result;
  }

  static Future<void> deleteData(int id) async {
    final db = await SQLHelper.db();
    try {
      await db.delete('data', where: "id = ?", whereArgs: [id]);
    }catch (e) {}
  }
}


////////////////////////////////2222222222222

// import 'package:flutter/material.dart';
// import 'db_helper.dart'; 

// class AddHome extends StatefulWidget {
//   @override
//   State<AddHome> createState() => _AddHomeState();
// }

//   class _AddHomeState extends State<AddHome> {
//     List<Map<String, dynamic>> _allData = [];

//     bool _isLoading = true; 
//     final TextEditingController _newTimeontroller= TextEditingController();
//     final TextEditingController _newTitleController = TextEditingController();
// // get all data
//     void _refreshData() async{
//       final data = await SQLHelper.getAllData();
//       setState(() {
//         _allData = data;
//         _isLoading = false;
//       });
//     }

// @override
// void initState(){
//   super.initState();
//   _refreshData();
// }


// // add data
// Future<void> _addData() async {
//  await SQLHelper.createData(_titleController.text, _descController.text);
//  _refreshData();
// }
// // update data
// Future<void> _updateData(int id) async {
//  await SQLHelper.updateData(id, _titleController.text, _descController.text);
//  _refreshData();
// }
// // delete data
// void _deleteData(int id) async {
//   await SQLHelper.deleteData(id);
//   ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
//     backgroundColor: Colors.redAccent,
//     content: Text("data"),
//     ));
//     _refreshData();
//   }

// final TextEditingController _titleController = TextEditingController();
// final TextEditingController _descController = TextEditingController();

// void showBottomSheet(int? id) async {
//   if(id !=null){
//     final existingData =  
//     _allData.firstWhere((element) => element['id'] == id);
//     _titleController.text = existingData['title'];
//     _descController.text = existingData['desc'];
//   }

// showModalBottomSheet(
//       elevation: 5,
//       isScrollControlled: true,
//       context: context,
//       builder: (_) => Container(
//         padding: EdgeInsets.only(
//           top: 30,
//           left: 15,
//           right: 15,
//           bottom: MediaQuery.of(
//                 context,
//               ).viewInsets.bottom +
//               50,
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           crossAxisAlignment: CrossAxisAlignment.end,
//           children: [
//             TextField(
//               controller: _titleController,
//               decoration: InputDecoration(
//                 border: OutlineInputBorder(),
//                 hintText: "สายพันธุ์ต้นมะเขือเทศ",
//               ),
//             ),
//              SizedBox(height: 10),
//             TextField(
//               controller: _descController,
//               maxLength: 4,
//               decoration: InputDecoration(
//                 border: OutlineInputBorder(),
//                 hintText: "ปริมาณที่ปลูก",
//               ),
//             ),
//             SizedBox(height: 10),
//         // เพิ่ม TextField สำหรับข้อมูลใหม่ที่นี่
//         TextField(
//           controller: _newTitleController,
//           decoration: InputDecoration(
//             border: OutlineInputBorder(),
//             hintText: "โรงเรือนที่ปลูก",
//           ),
//         ),
//         SizedBox(height: 10),
//                 // เพิ่ม TextField สำหรับข้อมูลใหม่ที่นี่
//                 TextField(
//                   controller: _newTimeontroller,
//                   decoration: InputDecoration(
//                     border: OutlineInputBorder(),
//                     hintText: "time",
//                   ),
//                 ),

//             SizedBox(height: 20),
//             Center(
//               child: ElevatedButton(
//                 onPressed: () async {
//                   if (id == null) {
//                     await _addData();
//                   }
//                   if (id != null) {
//                     await _updateData(id);
//                   }

//                   _titleController.text = "";
//                   _descController.text = "";
                

//                   Navigator.of(context).pop();
//                   print("Data Added: ");
//                 },
//                 child: Padding(
//                   padding: EdgeInsets.all(18),
//                   child: Text(
//                     id == null ? "Add Data" : "update",
//                     style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
//                   ),
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: Color(0xffeceaf4),
//       appBar: AppBar(
//         title: Text("CRUD Operations"),
//       ),
//       body: _isLoading
//           ? Center(
//               child: CircularProgressIndicator(),
//             )
//           : ListView.builder(
//               itemCount: _allData.length,
//               itemBuilder: (context, index) => Card(
//                 margin: EdgeInsets.all(15),
//                 child: ListTile(
//                   title: Padding(
//                     padding: EdgeInsets.symmetric(vertical: 5),
//                     child: Text(
//                       _allData[index]['title'],
//                       style: TextStyle(
//                         fontSize: 20,
//                       ),
//                     ),
//                   ),
//                   subtitle: Text(_allData[index]['desc']),
//                   trailing: Row(
//                     mainAxisSize: MainAxisSize.min,
//                     children: [
//                       IconButton(
//                         onPressed: () {
//                           showBottomSheet(_allData[index]['id']);
//                         },
//                         icon: Icon(
//                           Icons.edit,
//                           color: Colors.indigo,
//                         ),
//                       ),
//                       IconButton(
//                         onPressed: () {
//                           _deleteData(_allData[index]['id']);
//                         },
//                         icon: Icon(
//                           Icons.delete,
//                           color: Colors.redAccent,
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             ),
//       floatingActionButton: FloatingActionButton(
//         onPressed: () => showBottomSheet(null),
//         child: Icon(Icons.add),
//       ),
//     );
//   }
// }
